const ipfsAPI = require("ipfs-api"); //to test ipfs
const fs = require("fs");
//Connceting to the ipfs network via infura gateway
const ipfs = ipfsAPI("ipfs.infura.io", "5001", { protocol: "https" });

// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require("SupplyChain");

contract("SupplyChain", function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1;
  var upc = 1;
  const ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = "John Doe";
  const originFarmInformation = "Yarray Valley";
  const originFarmLatitude = "-38.239770";
  const originFarmLongitude = "144.341490";
  var productID = sku + upc;
  const productNotes = "Best beans for Espresso";
  const productPrice = web3.utils.toWei("1", "ether");
  var itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const emptyAddress = "0x00000000000000000000000000000000000000";

  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", accounts[0]);
  console.log("Farmer: accounts[1] ", accounts[1]);
  console.log("Distributor: accounts[2] ", accounts[2]);
  console.log("Retailer: accounts[3] ", accounts[3]);
  console.log("Consumer: accounts[4] ", accounts[4]);

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    await supplyChain.addFarmer(originFarmerID);

    //generate random file to upload to ipfs
    let dummyText = "This is demo ipfs. I am TAK. " + +new Date();
    console.log("dummyText : " + dummyText);
    let dummyFileName = "dummy_file_" + +new Date() + ".txt";
    fs.writeFileSync(dummyFileName, dummyText);
    let readingFile = fs.readFileSync(dummyFileName);
    let testBuffer = new Buffer(readingFile);

    let ipfsResult = await ipfs.files.add(testBuffer);
    let dummyFileIpfsHash = ipfsResult[0].hash;
    console.log("ipfs hash is :  " + dummyFileIpfsHash);
    console.log("file link is : https://gateway.ipfs.io/ipfs/" + dummyFileIpfsHash);
    fs.unlinkSync(dummyFileName); //delete file

    //end

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    let tx = await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes,
      dummyFileIpfsHash,
      {
        from: originFarmerID,
      }
    );

    //checking if event called is Harvested and value returned from event is same as event called with
    if (tx.logs[0].event === "Harvested" && tx.logs[0].args.upc.toNumber() === upc) {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], originFarmerID, "Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Missing or Invalid originFarmLongitude");
    assert.equal(resultBufferTwo[5], 0, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
    assert.equal(resultBufferOne[8], dummyFileIpfsHash, "Invalid IPFS hash");
  });

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Mark an item as Processed by calling function processtItem()
    let itemProcessed = await supplyChain.processItem(upc, {
      from: originFarmerID,
    });
    //checking if event called is Processed and value returned from event is same as event called with
    if (itemProcessed.logs[0].event === "Processed" && itemProcessed.logs[0].args.upc.toNumber() === upc) {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], originFarmerID, "Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Missing or Invalid originFarmLongitude");
    assert.equal(resultBufferTwo[5], 1, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  //   // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Mark an item as Packed by calling function packItem()
    let itemPacked = await supplyChain.packItem(upc, {
      from: originFarmerID,
    });

    // Watch the emitted event Packed()
    //checking if event called is Processed and value returned from event is same as event called with
    if (itemPacked.logs[0].event === "Packed" && itemPacked.logs[0].args.upc.toNumber() === upc) {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], originFarmerID, "Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Missing or Invalid originFarmLongitude");
    assert.equal(resultBufferTwo[5], 2, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  //   // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Mark an item as ForSale by calling function sellItem()
    let itemPacked = await supplyChain.sellItem(upc, productPrice, {
      from: originFarmerID,
    });

    // Watch the emitted event ForSale()
    //checking if event called is ForSale and value returned from event is same as event called with
    if (itemPacked.logs[0].event === "ForSale" && itemPacked.logs[0].args.upc.toNumber() === upc) {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(resultBufferOne[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], originFarmerID, "Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Missing or Invalid originFarmLongitude");
    assert.equal(resultBufferTwo[5], 3, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  //   // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    await supplyChain.addDistributor(distributorID);

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Mark an item as ForSale by calling function buyItem()
    let itemBought = await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
    });

    // Watch the emitted event Sold()
    //checking if event called is Sold and value returned from event is same as event called with
    if (itemBought.logs[0].event === "Sold" && itemBought.logs[0].args.upc.toNumber() === upc) {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(resultBufferOne[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], distributorID, "Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Missing or Invalid originFarmLongitude");
    assert.equal(resultBufferTwo[5], 4, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  //   // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Mark an item as ForSale by calling function shipItem()
    let itemShipped = await supplyChain.shipItem(upc, {
      from: distributorID,
    });

    // Watch the emitted event Shipped()
    //checking if event called is Shipped and value returned from event is same as event called with
    if (itemShipped.logs[0].event === "Shipped" && itemShipped.logs[0].args.upc.toNumber() === upc) {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(resultBufferOne[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], distributorID, "Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Missing or Invalid originFarmLongitude");
    assert.equal(resultBufferTwo[5], 5, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  //   // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    const supplyChain = await SupplyChain.deployed();
    await supplyChain.addRetailer(retailerID);

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Mark an item as ForSale by calling function shipItem()
    let itemReceived = await supplyChain.receiveItem(upc, {
      from: retailerID,
    });

    // Watch the emitted event Received()
    //checking if event called is Received and value returned from event is same as event called with
    if (itemReceived.logs[0].event === "Received" && itemReceived.logs[0].args.upc.toNumber() === upc) {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(resultBufferOne[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], retailerID, "Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Missing or Invalid originFarmLongitude");
    assert.equal(resultBufferTwo[5], 6, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  //   // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    await supplyChain.addConsumer(consumerID);

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Mark an item as ForSale by calling function shipItem()
    let itemPurchased = await supplyChain.purchaseItem(upc, {
      from: consumerID,
    });

    // Watch the emitted event Purchased()
    //checking if event called is Purchased and value returned from event is same as event called with
    if (itemPurchased.logs[0].event === "Purchased" && itemPurchased.logs[0].args.upc.toNumber() === upc) {
      eventEmitted = true;
    }

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(resultBufferOne[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], consumerID, "Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Missing or Invalid originFarmLongitude");
    assert.equal(resultBufferTwo[5], 7, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  //   // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

    // Verify the result set:
    assert.equal(resultBufferOne[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], consumerID, "Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3], originFarmerID, "Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4], originFarmName, "Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5], originFarmInformation, "Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6], originFarmLatitude, "Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7], originFarmLongitude, "Error: Missing or Invalid originFarmLongitude");
  });

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set:
    assert.equal(resultBufferTwo[0], upc, "Error: Invalid item SKU");
    assert.equal(resultBufferTwo[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferTwo[2], sku + upc, "Error: Missing or Invalid productId");
    assert.equal(resultBufferTwo[3], productNotes, "Error: Missing or Invalid productNotes");
    assert.equal(resultBufferTwo[4], productPrice, "Error: Missing or Invalid productPrice");
    assert.equal(resultBufferTwo[5], 7, "Error: Missing or Invalid itemState");
    assert.equal(resultBufferTwo[6], distributorID, "Error: Missing or Invalid distributorID");
    assert.equal(resultBufferTwo[7], retailerID, "Error: Missing or Invalid retailerID");
    assert.equal(resultBufferTwo[8], consumerID, "Error: Missing or Invalid consumerID");
  });
});
